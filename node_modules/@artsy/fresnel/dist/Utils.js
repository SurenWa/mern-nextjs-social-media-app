"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propKey = propKey;
exports.intersection = intersection;
exports.createRuleSet = createRuleSet;
exports.createClassName = createClassName;
exports.castBreakpointsToIntegers = castBreakpointsToIntegers;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/**
 * Extracts the single breakpoint prop from the props object.
 */
function propKey(breakpointProps) {
  return Object.keys(breakpointProps)[0];
}
/**
 * Returns the intersection of two arrays.
 */


function intersection(a1, a2) {
  return a2 ? a1.filter(function (element) {
    return a2.indexOf(element) >= 0;
  }) : _toConsumableArray(a1);
}
/**
 * Generate a style rule for a given class name that will hide the element
 * when the given query matches.
 */


function createRuleSet(className, query) {
  return "@media ".concat(query, "{.").concat(className, "{display:none!important;}}");
}
/**
 * Given a list of strings, or string tuples, generates a class name.
 */


function createClassName() {
  for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {
    components[_key] = arguments[_key];
  }

  return ["fresnel"].concat(_toConsumableArray(components.reduce(function (acc, breakpoint) {
    return Array.isArray(breakpoint) ? _toConsumableArray(acc).concat(_toConsumableArray(breakpoint)) : _toConsumableArray(acc).concat([breakpoint]);
  }, []))).join("-");
}
/**
 * Returns an object with every values casted to integers.
 */


function castBreakpointsToIntegers(breakpoints) {
  var keys = Object.keys(breakpoints);
  return keys.reduce(function (previous, current, currentIndex) {
    return _objectSpread({}, previous, _defineProperty({}, keys[currentIndex], Number(breakpoints[current])));
  }, {});
}
//# sourceMappingURL=Utils.js.map